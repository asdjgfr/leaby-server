import {
  quicktype,
  InputData,
  jsonInputForTargetLanguage,
} from 'quickType-core';
import { readFileSync, writeFileSync } from 'node:fs';
import { join } from 'node:path';
import * as yaml from 'js-yaml';
import { merge } from 'lodash';

const beforeText =
  '// Automatically generated by script, please do not modify this file manually.';
const typesDir = join(process.cwd(), 'types');

function filePathNotes(path: string) {
  return `// program-path${path.replace(process.cwd(), '')}`;
}

async function quickTypeJSON(
  targetLanguage: string,
  typeName: string,
  jsonString: string,
) {
  const jsonInput = jsonInputForTargetLanguage(targetLanguage);

  await jsonInput.addSource({
    name: typeName,
    samples: [jsonString],
  });

  const inputData = new InputData();
  inputData.addInput(jsonInput);

  return await quicktype({
    inputData,
    lang: targetLanguage,
    rendererOptions: {
      'just-types': 'true',
    },
  });
}

async function generatePkgJSON() {
  const fileName = 'package.json';
  const filePath = join(process.cwd(), fileName);
  const pkgJson: string = readFileSync(filePath, 'utf8');
  const { lines } = await quickTypeJSON('typescript', 'PkgJSON', pkgJson);
  lines.unshift(beforeText, filePathNotes(filePath));
  writeFileSync(
    join(typesDir, `${fileName}.d.ts`),
    String(lines.join('\n')),
    'utf8',
  );
}

async function generateConfig() {
  const fileName = 'config.yaml';
  const localFileName = 'config.local.yaml';
  const filePath = join(process.cwd(), 'config', fileName);
  const localFilePath = join(process.cwd(), 'config', localFileName);
  const configJson: string = JSON.stringify(
    merge(
      yaml.load(readFileSync(localFilePath, 'utf8')),
      yaml.load(readFileSync(filePath, 'utf8')),
    ),
  );
  const { lines } = await quickTypeJSON('typescript', 'Config', configJson);
  lines.unshift(beforeText, filePathNotes(filePath));
  writeFileSync(
    join(typesDir, `${fileName}.d.ts`),
    String(lines.join('\n')),
    'utf8',
  );
}

async function main() {
  await generatePkgJSON();
  await generateConfig();
}

main().catch(console.error);
